#!/bin/bash

# define script functions used in the experiment run script
# ---------------------------------------------------------
source "${basedir}"/run/add_run_routines

set +xv
#--------------------------------------------------------------------------------------------------
#
# ICON-ESM Dyamond-Winter R2B4 lite
#
# based on exp.esm_dyamond_winter_R2B4_lite
#
author_list="Monika Esch, Rene Redler, Daniel Klocke"
#
# Contact points:
# Atmosphere: Monika Esch, Daniel Klocke
# Ocean:      Helmuth Haak
# Land:       Reiner Schnur
# Discharge:  Tom Riddick
# Coupling:   Rene Redler
#
#--------------------------------------------------------------------------------------------------
#
# This file describes a coupled experiment based on the non-hydrostatic atmosphere and the
# Sapphire physics and the hydrostatic ocean. The atmosphere is intialized from IFS analysis files for 20 Jan 2020 and uses
# from analysis files and using transient boundary conditions for:
# - spectral solar irradiation
# - well mixed greenhouse gases CO2, CH4, N2O, CFCs
# - O3 concentration
# - Kinne background aerosol optical properties (irad_aero=13)
#
# - SST and sea ice are transferred via YAC from the ocean.
#
# The ocean was initialised from Levitus climatology
# on a coarser resolution (R2B8). After a spin-up phase the ocean state was interpolated
# onto the R2B9 grid. Thus, initial conditions for the ocean in the R2B9 configuration
# are already provided in a restart file.
# The coupling:
#
# atmosphere -> ocean:
# . surface_downward_eastward_stress
# . surface_downward_northward_stress
# . surface_fresh_water_flux
# . total_heat_flux
# . atmosphere_sea_ice_bundle
# . river_runoff
# . surface pressure
# . 10m_wind_speed
#
# ocean -> atmosphere:
# . sea_surface_temperature
# . eastward_sea_water_velocity
# . northward_sea_water_velocity
# . ocean_sea_ice_bundle
#
# currently not activated for coupling:
# . co2_mixing_ratio
# . co2_flux
#
#
#--------------------------------------------------------------------------------------------------

# (0) Basic model configuration
# -----------------------------

atmos_gridID=${atmos_gridID:="0043"}
atmos_refinement=${atmos_refinement:="R02B04"}

ocean_gridID=${ocean_gridID:="0036"}
ocean_refinement=${ocean_refinement:="R02B04"}

nproma_atm=${nproma_atm:=32}
nproma_oce=${nproma_oce:=8}

#=============================================================================

if [ -f  $experiments_dir/$EXPNAME/isRestartRun.sem ]; then
  echo "restarting from a set of restart files from a previous run"
  initialiseOcean="FALSE"
else
  initialiseOcean="fromRestart"
# initialiseOcean="fromClimatology"
fi

#=============================================================================
#
# (1) Define the model time stepping
# ----------------------------------

radTimeStep="PT1H"               # radiation time step:    96 time steps per day
atmTimeStep="PT15M"              # atmosphere time step
                                 #
                                 #
oceTimeStep="PT1H"               # ocean time step:      1080 time steps per day
                                 #                          9 time step  per couplingTimeStep
couplingTimeStep="PT1H"          # coupling time step:      1 time steps per radTimeStep

#--------------------------------------------------------------------------------------------------

# (2) Variables provided by the scripting mechanism

# EXPNAME                       = name of exp. in 'exp.<name>'
# basedir                       = base directory, where src/, run/ etc exist
# icon_data_poolFolder          = base directory, where grids/, input/ and setup/ exist
# nproma                        = blocking length for array dimensioning and inner loop lengths
#                                 -> deprecated. nproma_atm and nproma_ocn are used here.

icon_data_poolFolder="${icon_data_rootFolder:-/pool/data/ICON}/grids/public/mpim"

#--------------------------------------------------------------------------------------------------

# (3) Set variables needed by the scripting mechanism
# ---------------------------------------------------

# horizontal grid(s)
# ------------------
atm_grid_name=icon_grid_${atmos_gridID}_${atmos_refinement}_G

atmo_grid_folder=${icon_data_poolFolder}/${atmos_gridID}
atmo_data_InputFolder=${icon_data_poolFolder}/${atmos_gridID}
atmo_dyn_grid=${atm_grid_name}.nc

# start and end date+time
# -----------------------
start_date=${start_date:="1979-01-01T00:00:00Z"}
end_date=${end_date:="1979-01-11T00:00:00Z"}

# restart intervals
# -----------------
checkpoint_interval=${checkpoint_interval:="P1Y"}
restart_interval=${restart_interval:="P5D"}

# output intervals
# ----------------

atm_file_interval="P1D"
atm_file_interval_2d="P1D"
atm_file_interval_3d="P1D"
atm_file_interval_pl="P1D"

atm_output_interval="PT3H"
atm_output_interval_2d="PT30M"
atm_output_interval_3d="PT3H"
atm_output_interval_pl="PT30M"

oce_file_interval="P1D"
oce_monitor_output_interval="P1D"          # monitoring and moc
oce_2d_output_interval="PT3H"              # 2dhf
oce_2d_high_output_interval="PT1H"         # 2dopt
oce_3d_output_interval="P1D"               # 2d, 3d, opt and 3dlev
oce_3d_upper_levels_output_interval="PT3H" # 3du200m
oce_3d_top_level_output_interval="PT3H"    # 3dtoplevel

# namelist files
# --------------
atm_namelist=NAMELIST_${EXPNAME}_atm
jsbach_namelist=NAMELIST_${EXPNAME}_lnd
oce_namelist=NAMELIST_${EXPNAME}_oce

#--------------------------------------------------------------------------------------------------

# (4) Define the model configuration
#-----------------------------------

# JSBACH settings
jsbach_usecase=jsbach_lite       # jsbach_lite or jsbach_pfts
jsbach_with_lakes=yes
jsbach_with_carbon=no            # yes needs jsbach_pfts usecase

# Some further processing for land configuration
# ----------------------------------------------

llake=$([ "${jsbach_with_lakes:=yes}" == yes ]    && echo .TRUE. || echo .FALSE. )
lcarbon=$([ "${jsbach_with_carbon:=yes}" == yes ] && echo .TRUE. || echo .FALSE. )

if [[ $jsbach_usecase == *pfts* ]]
then
  pft_file_tag="11pfts_"
else
  pft_file_tag=""
fi

#--------------------------------------------------------------------------------------------------

# (6) Output control
# ------------------

# asynchronous diagnostic output processes
# ----------------------------------------

atm_io_tasks=0
oce_io_tasks=0

pio_type_control=0

# output file selection
# ---------------------

# output_<xyz>=yes : yes --> output files for <xyz>, any other value --> no files for <xyz>

output_atm_vgrid=no                # produces 1 atm file
output_atm_debug=no                # produces 1 atm file
output_atm_3d=yes                  # produces 7 atm file
output_atm_2d=yes                  # produces 3 atm file
output_phy_3d=no                   # produces 1 atm file
                                   # Note: "yes" increases the output volume significantly!

output_lnd=yes                     # produces 1 lnd file

output_oce_2d_1h=no                # produces 1 oce file # 2dopt
output_oce_2d_3h=no                # produces 1 oce file # 2dhf
output_oce_3d_24h=no               # produces 4 oce file # 2d, 3d, opt and 3dlev
output_oce_3d_top_level=no         # produces 1 oce file # 3dtoplevel
output_oce_3d_upper_levels=no      # produces 1 oce file # 3du200m
output_oce_monitor=no              # produces 2 oce file # monitoring and moc
output_oce_fx=no                   # produces 1 oce file # fx

#--------------------------------------------------------------------------------------------------
# I. coupling section
#--------------------------------------------------------------------------------------------------

# I.1 Split the number of total procs and assign to each component
# ----------------------------------------------------------------

no_of_nodes=${SLURM_JOB_NUM_NODES:=1}
no_of_oce_nodes=1
no_of_atm_nodes=$(( no_of_nodes - no_of_oce_nodes))

if [ $ no_of_atm_nodes -lt 1 ] ; then
  check_error 0 "This setup requires at least 2 mpi processe2 nodes. Exit"
fi

atm_tasks=$(( no_of_atm_nodes * SLURM_NTASKS_PER_NODE ))
oce_tasks=$(( no_of_oce_nodes * SLURM_NTASKS_PER_NODE ))

tot_tasks=$(( no_of_nodes * SLURM_NTASKS_PER_NODE ))

atm_min_rank=0
atm_max_rank=$(( atm_tasks - 1 ))
atm_inc_rank=1

oce_min_rank=$(( atm_max_rank + 1 ))
oce_max_rank=$(( atm_max_rank + oce_tasks ))
oce_inc_rank=1

atm_compute_tasks=$(( atm_tasks - atm_io_tasks ))
oce_compute_tasks=$(( oce_tasks - oce_io_tasks ))

#
# I.2 Fill model list
# -------------------
#
namelist_list[0]="$atm_namelist"
modelname_list[0]="atmo"
modeltype_list[0]=1
minrank_list[0]=$atm_min_rank
maxrank_list[0]=$atm_max_rank
incrank_list[0]=$atm_inc_rank
#
namelist_list[1]="$oce_namelist"
modelname_list[1]="ocean"
modeltype_list[1]=2
minrank_list[1]=$oce_min_rank
maxrank_list[1]=$oce_max_rank
incrank_list[1]=$oce_inc_rank


# I.3 YAC coupling library configuration
#-----------------------------------------------------------------------------

atm_lag=1
oce_lag=1

# co2_flux and co2_mixing_ratio are listed as transients
# below but are not configured for coupling in the couples
# section. There fields are therefore not considered for
# the search not for the data exchange even if yac_fget and
# yac_fput are called for these fields.
#
# component names in coupling.xml must (!) match with modelname_list[*]
#
cat > coupling_${EXPNAME}.xml << EOF
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<coupling xmlns="http://www.w3schools.com"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://www.w3schools.com coupling.xsd">
   <redirect redirect_of_root="false" redirect_stdout="false"/>
   <components>
      <component id="1">
         <name>${modelname_list[0]}</name>
         <model>ICON</model>
         <simulated>atmosphere</simulated>
         <transient_grid_refs>
            <transient_grid_ref collection_size="2" grid_ref="1" id="1" transient_ref="1"/>
            <transient_grid_ref collection_size="2" grid_ref="1" id="2" transient_ref="2"/>
            <transient_grid_ref collection_size="3" grid_ref="1" id="3" transient_ref="3"/>
            <transient_grid_ref collection_size="4" grid_ref="1" id="4" transient_ref="4"/>
            <transient_grid_ref collection_size="2" grid_ref="1" id="5" transient_ref="5"/>
            <transient_grid_ref collection_size="1" grid_ref="1" id="6" transient_ref="6"/>
            <transient_grid_ref collection_size="1" grid_ref="1" id="7" transient_ref="7"/>
            <transient_grid_ref collection_size="1" grid_ref="1" id="8" transient_ref="8"/>
            <transient_grid_ref collection_size="3" grid_ref="1" id="9" transient_ref="9"/>
            <transient_grid_ref collection_size="1" grid_ref="1" id="10" transient_ref="10"/>
            <transient_grid_ref collection_size="1" grid_ref="1" id="11" transient_ref="11"/>
            <transient_grid_ref collection_size="1" grid_ref="1" id="12" transient_ref="12"/>
            <transient_grid_ref collection_size="1" grid_ref="1" id="13" transient_ref="13"/>
            <transient_grid_ref collection_size="1" grid_ref="1" id="14" transient_ref="14"/>
         </transient_grid_refs>
      </component>
      <component id="2">
         <name>${modelname_list[1]}</name>
         <model>ICON</model>
         <simulated>ocean</simulated>
         <transient_grid_refs>
            <transient_grid_ref collection_size="2" grid_ref="2" id="1" transient_ref="1"/>
            <transient_grid_ref collection_size="2" grid_ref="2" id="2" transient_ref="2"/>
            <transient_grid_ref collection_size="3" grid_ref="2" id="3" transient_ref="3"/>
            <transient_grid_ref collection_size="4" grid_ref="2" id="4" transient_ref="4"/>
            <transient_grid_ref collection_size="2" grid_ref="2" id="5" transient_ref="5"/>
            <transient_grid_ref collection_size="1" grid_ref="2" id="6" transient_ref="6"/>
            <transient_grid_ref collection_size="1" grid_ref="2" id="7" transient_ref="7"/>
            <transient_grid_ref collection_size="1" grid_ref="2" id="8" transient_ref="8"/>
            <transient_grid_ref collection_size="3" grid_ref="2" id="9" transient_ref="9"/>
            <transient_grid_ref collection_size="1" grid_ref="2" id="10" transient_ref="10"/>
            <transient_grid_ref collection_size="1" grid_ref="2" id="11" transient_ref="11"/>
            <transient_grid_ref collection_size="1" grid_ref="2" id="12" transient_ref="12"/>
            <transient_grid_ref collection_size="1" grid_ref="2" id="13" transient_ref="13"/>
            <transient_grid_ref collection_size="1" grid_ref="2" id="14" transient_ref="14"/>
         </transient_grid_refs>
      </component>
      <component id="3">
         <name>dummy</name>
         <model>ICON</model>
         <simulated>IO</simulated>
      </component>
   </components>
   <transients>
      <transient id="1" transient_standard_name="surface_downward_eastward_stress"/>
      <transient id="2" transient_standard_name="surface_downward_northward_stress"/>
      <transient id="3" transient_standard_name="surface_fresh_water_flux"/>
      <transient id="4" transient_standard_name="total_heat_flux"/>
      <transient id="5" transient_standard_name="atmosphere_sea_ice_bundle"/>
      <transient id="6" transient_standard_name="sea_surface_temperature"/>
      <transient id="7" transient_standard_name="eastward_sea_water_velocity"/>
      <transient id="8" transient_standard_name="northward_sea_water_velocity"/>
      <transient id="9" transient_standard_name="ocean_sea_ice_bundle"/>
      <transient id="10" transient_standard_name="10m_wind_speed"/>
      <transient id="11" transient_standard_name="river_runoff"/>
      <transient id="12" transient_standard_name="co2_mixing_ratio"/>
      <transient id="13" transient_standard_name="co2_flux"/>
      <transient id="14" transient_standard_name="sea_level_pressure"/>
   </transients>
   <grids>
      <grid alias_name="icon_atmos_grid" id="1"/>
      <grid alias_name="icon_ocean_grid" id="2"/>
   </grids>
   <dates>
      <start_date>+1800-01-01T00:00:00.000</start_date>
      <end_date>+2100-01-01T00:00:00.000</end_date>
      <calendar>proleptic-gregorian</calendar>
   </dates>
   <timestep_unit>ISO_format</timestep_unit>
   <couples>
      <couple>
         <component1 component_id="1"/>
         <component2 component_id="2"/>
         <transient_couple transient_id="1">
            <source component_ref="1" transient_grid_ref="1"/>
            <target transient_grid_ref="1"/>
            <timestep>
               <source>${atmTimeStep}</source>
               <target>${oceTimeStep}</target>
               <coupling_period operation="average">${couplingTimeStep}</coupling_period>
               <source_timelag>${atm_lag}</source_timelag>
               <target_timelag>${oce_lag}</target_timelag>
            </timestep>
            <mapping_on_source>true</mapping_on_source>
            <interpolation_requirements>
               <interpolation method="n-nearest_neighbor" n="1" weighted="ARITHMETIC_AVERAGE"/>
               <interpolation method="fixed_value" user_value="-999.9"/>
            </interpolation_requirements>
            <enforce_write_weight_file filename="">false</enforce_write_weight_file>
         </transient_couple>
         <transient_couple transient_id="2">
            <source component_ref="1" transient_grid_ref="2"/>
            <target transient_grid_ref="2"/>
            <timestep>
               <source>${atmTimeStep}</source>
               <target>${oceTimeStep}</target>
               <coupling_period operation="average">${couplingTimeStep}</coupling_period>
               <source_timelag>${atm_lag}</source_timelag>
               <target_timelag>${oce_lag}</target_timelag>
            </timestep>
            <mapping_on_source>true</mapping_on_source>
            <interpolation_requirements>
               <interpolation method="n-nearest_neighbor" n="1" weighted="ARITHMETIC_AVERAGE"/>
               <interpolation method="fixed_value" user_value="-999.9"/>
            </interpolation_requirements>
            <enforce_write_weight_file filename="">false</enforce_write_weight_file>
         </transient_couple>
         <transient_couple transient_id="3">
            <source component_ref="1" transient_grid_ref="3"/>
            <target transient_grid_ref="3"/>
            <timestep>
               <source>${atmTimeStep}</source>
               <target>${oceTimeStep}</target>
               <coupling_period operation="average">${couplingTimeStep}</coupling_period>
               <source_timelag>${atm_lag}</source_timelag>
               <target_timelag>${oce_lag}</target_timelag>
            </timestep>
            <mapping_on_source>true</mapping_on_source>
            <interpolation_requirements>
               <interpolation method="n-nearest_neighbor" n="1" weighted="ARITHMETIC_AVERAGE"/>
               <interpolation method="fixed_value" user_value="-999.9"/>
            </interpolation_requirements>
            <enforce_write_weight_file filename="">false</enforce_write_weight_file>
         </transient_couple>
         <transient_couple transient_id="4">
            <source component_ref="1" transient_grid_ref="4"/>
            <target transient_grid_ref="4"/>
            <timestep>
               <source>${atmTimeStep}</source>
               <target>${oceTimeStep}</target>
               <coupling_period operation="average">${couplingTimeStep}</coupling_period>
               <source_timelag>${atm_lag}</source_timelag>
               <target_timelag>${oce_lag}</target_timelag>
            </timestep>
            <mapping_on_source>true</mapping_on_source>
            <interpolation_requirements>
               <interpolation method="n-nearest_neighbor" n="1" weighted="ARITHMETIC_AVERAGE"/>
               <interpolation method="fixed_value" user_value="-999.9"/>
            </interpolation_requirements>
            <enforce_write_weight_file filename="">false</enforce_write_weight_file>
         </transient_couple>
         <transient_couple transient_id="5">
            <source component_ref="1" transient_grid_ref="5"/>
            <target transient_grid_ref="5"/>
            <timestep>
               <source>${atmTimeStep}</source>
               <target>${oceTimeStep}</target>
               <coupling_period operation="average">${couplingTimeStep}</coupling_period>
               <source_timelag>${atm_lag}</source_timelag>
               <target_timelag>${oce_lag}</target_timelag>
            </timestep>
            <mapping_on_source>true</mapping_on_source>
            <interpolation_requirements>
               <interpolation method="n-nearest_neighbor" n="1" weighted="ARITHMETIC_AVERAGE"/>
               <interpolation method="fixed_value" user_value="-999.9"/>
            </interpolation_requirements>
            <enforce_write_weight_file filename="">false</enforce_write_weight_file>
         </transient_couple>
         <transient_couple transient_id="6">
            <source component_ref="2" transient_grid_ref="6"/>
            <target transient_grid_ref="6"/>
            <timestep>
               <source>${oceTimeStep}</source>
               <target>${atmTimeStep}</target>
               <coupling_period operation="average">${couplingTimeStep}</coupling_period>
               <source_timelag>${oce_lag}</source_timelag>
               <target_timelag>${atm_lag}</target_timelag>
            </timestep>
            <mapping_on_source>true</mapping_on_source>
            <interpolation_requirements>
               <interpolation method="n-nearest_neighbor" n="1" weighted="ARITHMETIC_AVERAGE"/>
               <interpolation method="fixed_value" user_value="-999.9"/>
            </interpolation_requirements>
            <enforce_write_weight_file filename="">false</enforce_write_weight_file>
         </transient_couple>
         <transient_couple transient_id="7">
            <source component_ref="2" transient_grid_ref="7"/>
            <target transient_grid_ref="7"/>
            <timestep>
               <source>${oceTimeStep}</source>
               <target>${atmTimeStep}</target>
               <coupling_period operation="average">${couplingTimeStep}</coupling_period>
               <source_timelag>${oce_lag}</source_timelag>
               <target_timelag>${atm_lag}</target_timelag>
            </timestep>
            <mapping_on_source>true</mapping_on_source>
            <interpolation_requirements>
               <interpolation method="n-nearest_neighbor" n="1" weighted="ARITHMETIC_AVERAGE"/>
               <interpolation method="fixed_value" user_value="-999.9"/>
            </interpolation_requirements>
            <enforce_write_weight_file filename="">false</enforce_write_weight_file>
         </transient_couple>
         <transient_couple transient_id="8">
            <source component_ref="2" transient_grid_ref="8"/>
            <target transient_grid_ref="8"/>
            <timestep>
               <source>${oceTimeStep}</source>
               <target>${atmTimeStep}</target>
               <coupling_period operation="average">${couplingTimeStep}</coupling_period>
               <source_timelag>${oce_lag}</source_timelag>
               <target_timelag>${atm_lag}</target_timelag>
            </timestep>
            <mapping_on_source>true</mapping_on_source>
            <interpolation_requirements>
               <interpolation method="n-nearest_neighbor" n="1" weighted="ARITHMETIC_AVERAGE"/>
               <interpolation method="fixed_value" user_value="-999.9"/>
            </interpolation_requirements>
            <enforce_write_weight_file filename="">false</enforce_write_weight_file>
         </transient_couple>
         <transient_couple transient_id="9">
            <source component_ref="2" transient_grid_ref="9"/>
            <target transient_grid_ref="9"/>
            <timestep>
               <source>${oceTimeStep}</source>
               <target>${atmTimeStep}</target>
               <coupling_period operation="average">${couplingTimeStep}</coupling_period>
               <source_timelag>${oce_lag}</source_timelag>
               <target_timelag>${atm_lag}</target_timelag>
            </timestep>
            <mapping_on_source>true</mapping_on_source>
            <interpolation_requirements>
               <interpolation method="n-nearest_neighbor" n="1" weighted="ARITHMETIC_AVERAGE"/>
               <interpolation method="fixed_value" user_value="-999.9"/>
            </interpolation_requirements>
            <enforce_write_weight_file filename="">false</enforce_write_weight_file>
         </transient_couple>
         <transient_couple transient_id="10">
            <source component_ref="1" transient_grid_ref="10"/>
            <target transient_grid_ref="10"/>
            <timestep>
               <source>${atmTimeStep}</source>
               <target>${oceTimeStep}</target>
               <coupling_period operation="average">${couplingTimeStep}</coupling_period>
               <source_timelag>${atm_lag}</source_timelag>
               <target_timelag>${oce_lag}</target_timelag>
            </timestep>
            <mapping_on_source>true</mapping_on_source>
            <interpolation_requirements>
               <interpolation method="n-nearest_neighbor" n="1" weighted="ARITHMETIC_AVERAGE"/>
               <interpolation method="fixed_value" user_value="-999.9"/>
            </interpolation_requirements>
            <enforce_write_weight_file filename="">false</enforce_write_weight_file>
         </transient_couple>
         <transient_couple transient_id="11">
            <source component_ref="1" transient_grid_ref="11"/>
            <target transient_grid_ref="11"/>
            <timestep>
               <source>${atmTimeStep}</source>
               <target>${oceTimeStep}</target>
               <coupling_period operation="average">${couplingTimeStep}</coupling_period>
               <source_timelag>${atm_lag}</source_timelag>
               <target_timelag>${oce_lag}</target_timelag>
            </timestep>
            <mapping_on_source>true</mapping_on_source>
            <interpolation_requirements>
               <interpolation method="source_to_target_map" spread_distance="0.3" weighted="ARITHMETIC_AVERAGE"/>
            </interpolation_requirements>
            <enforce_write_weight_file filename="">false</enforce_write_weight_file>
         </transient_couple>
         <transient_couple transient_id="14">
            <source component_ref="1" transient_grid_ref="14"/>
            <target transient_grid_ref="14"/>
            <timestep>
               <source>${atmTimeStep}</source>
               <target>${oceTimeStep}</target>
               <coupling_period operation="average">${couplingTimeStep}</coupling_period>
               <source_timelag>${atm_lag}</source_timelag>
               <target_timelag>${oce_lag}</target_timelag>
            </timestep>
            <mapping_on_source>true</mapping_on_source>
            <interpolation_requirements>
               <interpolation method="n-nearest_neighbor" n="1" weighted="ARITHMETIC_AVERAGE"/>
               <interpolation method="fixed_value" user_value="0.0"/>
            </interpolation_requirements>
            <enforce_write_weight_file filename="">false</enforce_write_weight_file>
         </transient_couple>
      </couple>
   </couples>
   <created date="10-02-2022 17:06" tool="YAC-CouplingGUI v.2.4.2"/>
</coupling>
EOF

#
# xsd and xml files for yac
# -------------------------
#
add_required_file ${thisdir}/coupling_${EXPNAME}.xml           ./coupling.xml
add_required_file ${basedir}/externals/yac/input/coupling.xsd  ./coupling.xsd

#-----------------------------------------------------------------------------
# II. ATMOSPHERE and LAND
#-----------------------------------------------------------------------------
#

# atmosphere namelist
# -------------------
cat > ${atm_namelist} << EOF
!
&coupling_mode_nml
  coupled_mode     = .TRUE.
/
&parallel_nml
 nproma            = ${nproma_atm}
 num_io_procs      = ${atm_io_tasks}
 num_restart_procs = 3
 io_process_stride = 12
 io_proc_chunk_size = 36
 pio_type          = ${pio_type_control}
/
&grid_nml
 dynamics_grid_filename = "${atmo_dyn_grid}"
/
&run_nml
 num_lev          = 90          ! number of full levels
 modelTimeStep    = "${atmTimeStep}"
 ltestcase        = .FALSE.     ! run testcase
 ldynamics        = .TRUE.      ! dynamics
 ltransport       = .TRUE.      ! transport
 iforcing         = 2           ! 0: none, 1: HS, 2: ECHAM, 3: NWP
 output           = 'nml'
 msg_level        = 10          ! level of details report during integration
 timers_level     = 10
 restart_filename = "${EXPNAME}_restart_atm_<rsttime>.mfr"
 activate_sync_timers = .TRUE.
/
&extpar_nml
 itopo            = 1           ! 1: read topography from the grid file
/
&initicon_nml
 init_mode        = 2           ! 2: initialize from IFS analysis
 ifs2icon_filename= "ifs2icon.nc"
/
&nonhydrostatic_nml
 ndyn_substeps    = 5 ! dtime/dt_dyn
 damp_height      = 44000. ! [m]
 rayleigh_coeff   = 1 ! set to 0.1001 for rerun with little change
 vwind_offctr     = 0.2
 divdamp_fac      = 0.004
 divdamp_order    = 24
 divdamp_trans_end = 17500
 divdamp_trans_start = 12500
 divdamp_type     = 32
 exner_expol      = 0.333
 hbot_qvsubstep   = 16000.
 htop_moist_proc  = 22500.
 iadv_rhotheta    = 2
 igradp_method    = 3
 itime_scheme     = 4
 ivctype          = 2
 l_open_ubc       = .false.
 l_zdiffu_t       = .true.
 lhdiff_rcf       = .true.
 thhgtd_zdiffu    = 125.
 thslp_zdiffu     = 0.02
/
&sleve_nml
 min_lay_thckn    = 25. ! [m]
 top_height       = 75000. ! [m]
 stretch_fac      = 0.9
 decay_scale_1    = 4000. ! [m]
 decay_scale_2    = 2500. ! [m]
 decay_exp        = 1.2
 flat_height      = 16000. ! [m]
 htop_thcknlimit  = 14000.
 max_lay_thckn    = 400.
/
&diffusion_nml
/
&transport_nml
 tracer_names     = 'hus','clw','cli', 'qr', 'qs', 'qg'
 ivadv_tracer     =    3 ,   3 ,   3 ,   3 ,   3 ,   3
 itype_hlimit     =    3 ,   4 ,   4 ,   4 ,   4 ,   4
 ihadv_tracer     =   52 ,   2 ,   2 ,   2 ,   2 ,   2
/
&aes_phy_nml
!
! domain 1
! --------
!
! atmospheric physics (""=never)
 aes_phy_config(1)%dt_rad = "${radTimeStep}"
 aes_phy_config(1)%dt_vdf = "${atmTimeStep}"
 aes_phy_config(1)%dt_mig = "${atmTimeStep}"
!
! surface (.TRUE. or .FALSE.)
 aes_phy_config(1)%ljsb   = .TRUE.
 aes_phy_config(1)%lamip  = .FALSE.
 aes_phy_config(1)%lice   = .TRUE.
 aes_phy_config(1)%lmlo   = .FALSE.
 aes_phy_config(1)%llake  = ${llake}   ! .TRUE. if jsbach_with_lakes=yes
 aes_phy_config(1)%iqneg_d2p = 2
 aes_phy_config(1)%iqneg_p2d = 2
/
&aes_rad_nml
! domain 1
 aes_rad_config(1)%isolrad    =  6
 aes_rad_config(1)%irad_h2o   =  1
 aes_rad_config(1)%irad_co2   =  2
 aes_rad_config(1)%irad_ch4   = 12
 aes_rad_config(1)%irad_n2o   = 12
 aes_rad_config(1)%irad_o3    =  6
 aes_rad_config(1)%irad_o2    =  2
 aes_rad_config(1)%irad_cfc11 =  2
 aes_rad_config(1)%irad_cfc12 =  2
 aes_rad_config(1)%irad_aero  = 12
 aes_rad_config(1)%vmr_co2    = 414.39e-06 ! constant ratio (348.0e-6)
 aes_rad_config(1)%vmr_ch4    = 1911.0e-09 ! constant ratio (1650.0e-9)
 aes_rad_config(1)%vmr_n2o    = 332.07e-09 ! constant ratio (306.0e-9)
 aes_rad_config(1)%lyr_perp   = .true.
 aes_rad_config(1)%yr_perp    = 2020
 aes_rad_config(1)%vmr_cfc11  = 218.23e-12
 aes_rad_config(1)%vmr_cfc12  = 495.02e-12
/
&aes_vdf_nml
 aes_vdf_config(1)%pr0        =  0.7
! aes_vdf_config(1)%turb       =  1        ! TTE (2 for Smagorinsky)
/
&aes_cov_nml
 aes_cov_config(1)%icov       = 3          ! 0/1 cloud cover based on cloud water and ice
 aes_cov_config(1)%cqx        = 1.e-6
/
&aes_cop_nml
    aes_cop_config(1)%cinhomi = 1.0
    aes_cop_config(1)%cinhoml1 = 0.4
    aes_cop_config(1)%cinhoml2 = 0.4
    aes_cop_config(1)%cinhoml3 = 0.4
    aes_cop_config(1)%cn1lnd = 50.0
    aes_cop_config(1)%cn1sea = 50.0
    aes_cop_config(1)%cn2lnd = 220.0
    aes_cop_config(1)%cn2sea = 100.0
/
&aes_mig_nml
    aes_mig_config(1)%mu_rain = 0.5
    aes_mig_config(1)%rain_n0_factor = 0.1
    aes_mig_config(1)%v0snow  = 25.
/
&sea_ice_nml
    albedow_sim  = 0.10
    albi         = 0.70
    albim        = 0.65
    albs         = 0.80
    albsm        = 0.65
    i_ice_dyn    = 1
    i_ice_therm  = 1
    leadclose_1  = 0.25
    leadclose_2n = 0.666
/
EOF

# jsbach namelist
# ---------------

cat > ${jsbach_namelist} << EOF
&jsb_model_nml
  usecase              = "${jsbach_usecase}"
  use_lakes            = ${llake}            ! TRUE if jsbach_with_lakes=yes
  fract_filename       = 'bc_land_frac.nc'
  init_from_ifs        = .TRUE.
/
&jsb_seb_nml
  bc_filename          = 'bc_land_phys.nc'
  ic_filename          = 'ic_land_soil.nc'
/
&jsb_rad_nml
  use_alb_veg_simple = .TRUE.           ! Use TRUE for jsbach_lite, FALSE for jsbach_pfts
  bc_filename          = 'bc_land_phys.nc'
  ic_filename          = 'ic_land_soil.nc'
/
&jsb_turb_nml
  bc_filename          = 'bc_land_phys.nc'
  ic_filename          = 'ic_land_soil.nc'
/
&jsb_sse_nml
  l_heat_cap_map       = .FALSE.
  l_heat_cond_map      = .FALSE.
  l_heat_cap_dyn       = .FALSE.
  l_heat_cond_dyn      = .FALSE.
  l_snow               = .TRUE.
  l_dynsnow            = .TRUE.
  l_freeze             = .TRUE.
  l_supercool          = .FALSE.
  bc_filename          = 'bc_land_soil.nc'
  ic_filename          = 'ic_land_soil.nc'
/
&jsb_hydro_nml
  l_organic            = .FALSE.
  bc_filename          = 'bc_land_soil.nc'
  ic_filename          = 'ic_land_soil.nc'
  bc_sso_filename      = 'bc_land_sso.nc'
/
&jsb_assimi_nml
  active               = .FALSE.             ! Use FALSE for jsbach_lite, TRUE for jsbach_pfts
/
&jsb_pheno_nml
  scheme               = 'climatology'       ! scheme = logrop / climatology; use climatology for jsbach_lite
  bc_filename          = 'bc_land_phys.nc'
  ic_filename          = 'ic_land_soil.nc'
/
&jsb_carbon_nml
  active               = ${lcarbon}   ! TRUE if jsbach_with_carbon=yes
  bc_filename          = 'bc_land_carbon.nc'
  ic_filename          = 'ic_land_carbon.nc'
  read_cpools          = .FALSE.
/
&jsb_fuel_nml
  active               = ${lcarbon}
  fuel_algorithm       = 1
/
&jsb_disturb_nml
  active               = .FALSE.
  ic_filename          = 'ic_land_soil.nc'
  bc_filename          = 'bc_land_phys.nc'
  fire_algorithm       = 1
  windbreak_algorithm  = 1
  lburn_pasture        = .FALSE.
/
&jsb_hd_nml
  active               = .TRUE.
  routing_scheme       = 'full'
  ic_filename          = 'ic_land_hd.nc'
  bc_filename          = 'bc_land_hd.nc'
  use_bifurcated_rivers = .FALSE.
  read_initial_reservoirs = .TRUE.
  diag_water_budget    = .TRUE.
  debug_hd             = .FALSE.
  enforce_water_budget = .FALSE.         ! True: stop in case of water conservation problem
/
EOF

#--------------------------------------------------------------------------------------------------

# Define the atmosphere and land input
# ------------------------------------

# model files
#
add_link_file ${basedir}/externals/rte-rrtmgp/rrtmgp/data/rrtmgp-data-lw-g256-2018-12-04.nc   ./coefficients_lw.nc
add_link_file ${basedir}/externals/rte-rrtmgp/rrtmgp/data/rrtmgp-data-sw-g224-2018-12-04.nc   ./coefficients_sw.nc
add_link_file ${basedir}/data/ECHAM6_CldOptProps_rrtmgp_lw.nc              ./rrtmgp-cloud-optics-coeffs-lw.nc
add_link_file ${basedir}/data/ECHAM6_CldOptProps_rrtmgp_sw.nc              ./rrtmgp-cloud-optics-coeffs-sw.nc

# namelist files
# --------------
add_required_file ${thisdir}/${atm_namelist}                            ./
add_required_file ${thisdir}/${jsbach_namelist}                         ./

# dictionary file for output variable names
#
dict_file="dict.${EXPNAME}"
cat ${basedir}/run/dict.iconam.mpim  > ${thisdir}/${dict_file}
add_required_file ${thisdir}/${dict_file}                               ./

# initial conditions
#
# - atmosphere: ECMWF analysis, 1979-01-01T00:00:00Z
datadir=${atmo_data_InputFolder}/initial_condition
add_link_file ${datadir}/ifs2icon_1979010100_${atmos_refinement}_G.nc   ./ifs2icon.nc
#
# boundary conditions
#
# - well mixed greenhouse gases
#
datadir=${icon_data_poolFolder}/common/greenhouse_gases
add_link_file ${datadir}/greenhouse_ssp245.nc                              ./bc_greenhouse_gases.nc
#
# range of years for yearly files
# assume start_date and end_date have the format yyyy-...
#
start_year=$(( ${start_date%%-*} - 1 ))
end_year=$(( ${end_date%%-*} + 1 ))
#
# - ozone
# -- for irad_o3=8
#
datadir=${atmo_data_InputFolder}/ozone
#
add_link_file ${datadir}/bc_ozone_picontrol.nc                             ./bc_ozone.nc
#
#   Kinne background aerosols are needed for the year 1850 (irad_aero=12)
#
#   Here we use revised data based on work by Sebastian Rast
#
datadir=${atmo_data_InputFolder}/aerosol_kinne
#
add_link_file ${datadir}/bc_aeropt_kinne_lw_b16_coa.nc                     ./
add_link_file ${datadir}/bc_aeropt_kinne_sw_b14_coa.nc                     ./
add_link_file ${datadir}/bc_aeropt_kinne_sw_b14_fin_1850.nc                ./bc_aeropt_kinne_sw_b14_fin.nc
#
# simple plumes
#
add_link_file ${basedir}/data/MACv2.0-SP_v1.nc                             ./MACv2.0-SP_v1.nc
#
# - sst and sic
#
datadir=${atmo_data_InputFolder}/sst_and_seaice
#
add_link_file ${datadir}/bc_sic_1979_2016.nc                               ./bc_sic.nc
add_link_file ${datadir}/bc_sst_1979_2016.nc                               ./bc_sst.nc
#
# - ssi and tsi
#
datadir=${icon_data_poolFolder}/common/solar_radiation
#
add_link_file ${datadir}/swflux_14band_cmip6_1850-2299-v3.2.nc             ./bc_solar_irradiance_sw_b14.nc
#
# - land parameters
#
datadir=${icon_data_poolFolder}/${atmos_gridID}-${ocean_gridID}/land
#
add_link_file ${datadir}/ic_land_soil_1979.nc                              ./ic_land_soil.nc
add_link_file ${datadir}/bc_land_soil_1979.nc                              ./bc_land_soil.nc
add_link_file ${datadir}/bc_land_frac_${pft_file_tag}1979.nc               ./bc_land_frac.nc
add_link_file ${datadir}/bc_land_phys_1979.nc                              ./bc_land_phys.nc
add_link_file ${datadir}/bc_land_sso_1979.nc                               ./bc_land_sso.nc
#
# - lctlib file for JSBACH
#
add_link_file ${basedir}/externals/jsbach/data/lctlib_nlct21.def           ./lctlib_nlct21.def
#
# - HD mask for interpolation of runoff
#
datadir=${icon_data_poolFolder}/${atmos_gridID}-${ocean_gridID}/land
#
add_link_file ${datadir}/hdrestart_R02B04_013_G_210120_1334_with_grid_file_mask.nc ./ic_land_hd.nc
add_link_file ${datadir}/hdpara_icon_r2b4_013_using_grid_lsmask.nc                 ./bc_land_hd.nc
#
add_link_file ${atmo_grid_folder}/${atmo_dyn_grid}                         ./
#
#--------------------------------------------------------------------------------------------------

# (5) Define the output
# ---------------------

# Parameters for all output files
# -------------------------------
cat >> ${atm_namelist} << EOF
&io_nml
 output_nml_dict  = "${dict_file}"
 netcdf_dict      = "${dict_file}"
 itype_pres_msl   = 4
 restart_file_type= 5
 restart_write_mode = "joint procs multifile"
/
EOF
#
# Define debug output file with high time res
# -------------------------------------------
#
if [[ "$output_atm_debug" == "yes" ]]; then
  #
  cat >> ${atm_namelist} << EOF
&output_nml
 output_filename  = "${EXPNAME}_atm_debug"
 filename_format  = "<output_filename>_<levtype_l>_<datetime2>"
 filetype         = 5
 remap            = 0
 operation        = 'none'
 output_grid      = .FALSE.
 output_start     = "${start_date}"
 output_end       = "${end_date}"
 output_interval  = "${atmTimeStep}"
 file_interval    = "PT5M"
 include_last     = .FALSE.
 ml_varlist       = 'ts'
/
EOF
fi
# Define output files
# -------------------
#
# output_<xyz>=yes : yes --> output files for <xyz>, any other value --> no files for <xyz>
#
# 3-dimensional files include 'ps' and 'pfull' to allow the vertical
# interpolation to pressure levels by cdo ap2pl.
#
if [[ "$output_atm_vgrid" == "yes" ]]; then
  #
  cat >> ${atm_namelist} << EOF
&output_nml
 output_filename  = "${EXPNAME}_atm_vgrid"
 filename_format  = "<output_filename>_<levtype_l>"
 filetype         = 5
 remap            = 0
 output_grid      = .TRUE.
 output_start     = "${start_date}"               ! output_start = output_end
 output_end       = "${start_date}"               ! --> write once only irrespective of
 output_interval  = "${atm_output_interval}"      !     the output interval and
 file_interval    = "${atm_file_interval}"        !     the file interval
 ml_varlist       = 'zghalf'  , 'zg'      , 'dzghalf'
/
EOF
fi


if [[ "$output_atm_3d" == "yes" ]]; then
  #
  # split file in high number of files for speedup
  #
  cat >> ${atm_namelist} << EOF
&output_nml
 output_filename  = "${EXPNAME}_atm_3d_1"
 filename_format  = "<output_filename>_<levtype_l>_<datetime2>"
 filetype         = 5
 remap            = 0
 operation        = 'mean'
 output_grid      = .FALSE.
 output_start     = "${start_date}"
 output_end       = "${end_date}"
 output_interval  = "${atm_output_interval}"
 file_interval    = "${atm_file_interval}"
 include_last     = .FALSE.
 ml_varlist       = 'pfull'   ,'ta'
/
&output_nml
 output_filename  = "${EXPNAME}_atm_3d_2"
 filename_format  = "<output_filename>_<levtype_l>_<datetime2>"
 filetype         = 5
 remap            = 0
 operation        = 'mean'
 output_grid      = .FALSE.
 output_start     = "${start_date}"
 output_end       = "${end_date}"
 output_interval  = "${atm_output_interval}"
 file_interval    = "${atm_file_interval}"
 include_last     = .FALSE.
 ml_varlist       = 'ua'      , 'va'
/
&output_nml
 output_filename  = "${EXPNAME}_atm_3d_3"
 filename_format  = "<output_filename>_<levtype_l>_<datetime2>"
 filetype         = 5
 remap            = 0
 operation        = 'mean'
 output_grid      = .FALSE.
 output_start     = "${start_date}"
 output_end       = "${end_date}"
 output_interval  = "${atm_output_interval}"
 file_interval    = "${atm_file_interval}"
 include_last     = .FALSE.
 ml_varlist       = 'wa'      , 'cl'
/
&output_nml
 output_filename  = "${EXPNAME}_atm_3d_4"
 filename_format  = "<output_filename>_<levtype_l>_<datetime2>"
 filetype         = 5
 remap            = 0
 operation        = 'mean'
 output_grid      = .FALSE.
 output_start     = "${start_date}"
 output_end       = "${end_date}"
 output_interval  = "${atm_output_interval}"
 file_interval    = "${atm_file_interval}"
 include_last     = .FALSE.
 ml_varlist       = 'hus'     , 'clw'
/
&output_nml
 output_filename  = "${EXPNAME}_atm_3d_5"
 filename_format  = "<output_filename>_<levtype_l>_<datetime2>"
 filetype         = 5
 remap            = 0
 operation        = 'mean'
 output_grid      = .FALSE.
 output_start     = "${start_date}"
 output_end       = "${end_date}"
 output_interval  = "${atm_output_interval}"
 file_interval    = "${atm_file_interval}"
 include_last     = .FALSE.
 ml_varlist       = 'cli'     ,'cptgz'
/
&output_nml
 output_filename  = "${EXPNAME}_atm_3d_6"
 filename_format  = "<output_filename>_<levtype_l>_<datetime2>"
 filetype         = 5
 remap            = 0
 operation        = 'mean'
 output_grid      = .FALSE.
 output_start     = "${start_date}"
 output_end       = "${end_date}"
 output_interval  = "${atm_output_interval}"
 file_interval    = "${atm_file_interval}"
 include_last     = .FALSE.
 ml_varlist       = 'rsd'     , 'rsu'
/
&output_nml
 output_filename  = "${EXPNAME}_atm_3d_7"
 filename_format  = "<output_filename>_<levtype_l>_<datetime2>"
 filetype         = 5
 remap            = 0
 operation        = 'mean'
 output_grid      = .FALSE.
 output_start     = "${start_date}"
 output_end       = "${end_date}"
 output_interval  = "${atm_output_interval}"
 file_interval    = "${atm_file_interval}"
 include_last     = .FALSE.
 ml_varlist       = 'rld'     , 'rlu'
/
EOF
fi


if [[ "$output_atm_2d" == "yes" ]]; then
  #
  cat >> ${atm_namelist} << EOF
&output_nml
 output_filename  = "${EXPNAME}_atm_2d"
 filename_format  = "<output_filename>_<levtype_l>_<datetime2>"
 filetype         = 5
 remap            = 0
 operation        = 'mean'
 output_grid      = .FALSE.
 output_start     = "${start_date}"
 output_end       = "${end_date}"
 output_interval  = "${atm_output_interval_2d}"
 file_interval    = "${atm_file_interval}"
 include_last     = .FALSE.
 ml_varlist       = 'ps'      , 'psl'     ,
                    'rsdt'    ,
                    'rsut'    , 'rsutcs'  , 'rlut'    , 'rlutcs'  ,
                    'rsds'    , 'rsdscs'  , 'rlds'    , 'rldscs'  ,
                    'rsus'    , 'rsuscs'  , 'rlus'    ,
                    'ts'      ,
                    'sic'     , 'sit'     ,
                    'clt'     ,
                    'prlr'    , 'prls'    ,
                    'pr'      , 'prw'     , 'cllvi'   , 'clivi'   ,
                    'qgvi'    , 'qrvi'    , 'qsvi'    , 'cptgzvi' ,
                    'hfls'    , 'hfss'    , 'evspsbl' ,
                    'tauu'    , 'tauv'    ,
                    'sfcwind' , 'uas'     , 'vas'     ,
                    'tas'
/
&output_nml
 output_filename  = "${EXPNAME}_atm_2d_850"
 filename_format  = "<output_filename>_<levtype_l>_<datetime2>"
 filetype         = 5                         ! output format: 2=GRIB2, 4=NETCDFv2 PN 5: netcfd with hdf5
 remap            = 0
 output_grid      = .FALSE.
 output_start     = "${start_date}"
 output_end       = "${end_date}"
 file_interval    = "${atm_file_interval}"
 output_interval  = "${atm_output_interval}"
 include_last     = .FALSE.
 mode             = 2
 pl_varlist       = 'ua', 'va', 'vor' , 'gpsm'
 p_levels         = 85000
/
&output_nml
 output_filename  = "${EXPNAME}_atm_2d_500"
 filename_format  = "<output_filename>_<levtype_l>_<datetime2>"
 filetype         = 5                         ! output format: 2=GRIB2, 4=NETCDFv2 PN 5: netcfd with hdf5
 remap            = 0
 output_grid      = .FALSE.
 output_start     = "${start_date}"
 output_end       = "${end_date}"
 file_interval    = "${atm_file_interval}"
 output_interval  = "${atm_output_interval}"
 include_last     = .FALSE.
 mode             = 2
 pl_varlist       = 'omega', 'zg'
 p_levels         = 50000
/
EOF
fi


if [[ "$output_phy_3d" == "yes" ]]; then
  #
  cat >> ${atm_namelist} << EOF
&output_nml
 output_filename  = "${EXPNAME}_phy_3d"
 filename_format  = "<output_filename>_<levtype_l>_<datetime2>"
 filetype         = 5
 remap            = 0
 operation        = 'mean'
 output_grid      = .FALSE.
 output_start     = "${start_date}"
 output_end       = "${end_date}"
 output_interval  = "${atm_output_interval}"
 file_interval    = "${atm_file_interval}"
 include_last     = .FALSE.
 ml_varlist       = 'ps'           , 'pfull'        ,
                    'tend_ta'      , 'tend_qhus'    ,
                    'tend_ta_dyn'  , 'tend_qhus_dyn',
                    'tend_ta_phy'  , 'tend_qhus_phy',
                    'tend_ta_rlw'  , 'tend_ta_rsw'  ,
                    'tend_ta_vdf'  , 'tend_qhus_vdf',
                    'tend_ta_mig'  , 'tend_qhus_mig',
                    'tend_qclw_mig', 'tend_qcli_mig',
                    'tend_qqr_mig' , 'tend_qqs_mig' , 'tend_qqg_mig'
/
EOF
fi

# minimal jsbach output for running atm_amip experiment
# for more jsbach output see exp.atm_amip_les
#
if [[ "$output_lnd" == "yes" ]]; then
  cat >> ${atm_namelist} << EOF
&output_nml
 output_filename  = "${EXPNAME}_lnd"
 filename_format  = "<output_filename>_<levtype_l>_<datetime2>"
 filetype         = 5
 remap            = 0
 operation        = 'mean'
 output_grid      = .FALSE.
 output_start     = "${start_date}"
 output_end       = "${end_date}"
 output_interval  = "${atm_output_interval}"
 file_interval    = "${atm_file_interval}"
 include_last     = .FALSE.
 ml_varlist       = 'hydro_w_soil_sl_box'       , 'hydro_w_ice_sl_box'    , 'hydro_w_soil_column_box'     , 'sse_t_soil_sl_box',
                    'turb_fact_q_air_box'       , 'turb_fact_qsat_srf_box', 'turb_fact_qsat_trans_srf_box',
                    'hydro_transpiration_box'   , 'hydro_q_snocpymlt_box' ,
                    'hydro_fract_water_box'     , 'hydro_fract_snow_box'  , 'hydro_w_skin_box'            , 'hydro_w_snow_box' ,
                    'sse_grnd_hflx_old_box'     , 'sse_hcap_grnd_old_box' ,
                    'hydro_runoff_box'          , 'hydro_drainage_box'    ,
                    'hydro_discharge_ocean_box' , 'hydro_discharge_box'
/
EOF
fi

#-----------------------------------------------------------------------------
# III. OCEAN and SEA-ICE (and HAMOCC) 
#-----------------------------------------------------------------------------

ocean_grid="icon_grid_${ocean_gridID}_${ocean_refinement}_O.nc"
ocean_grid_folder="${icon_data_poolFolder}/${ocean_gridID}"
ocean_data_InputFolder="${icon_data_poolFolder}/${ocean_gridID}/ocean"

#-----------------------------------------------------------------------------
#
# ocean namelist
# --------------

cat > ${oce_namelist} << EOF
!
&coupling_mode_nml
  coupled_mode               = .TRUE.
/
&parallel_nml
 nproma                      = ${nproma_oce}
 num_io_procs                = ${oce_io_tasks}
 num_restart_procs           = 4
 p_test_run                  = .FALSE.
 l_fast_sum                  = .FALSE.
 num_prefetch_proc           = 0
 pio_type                    = ${pio_type_control}
/
&grid_nml
 dynamics_grid_filename      = "${ocean_grid}"
 use_dummy_cell_closure      = .TRUE.
 use_duplicated_connectivity = .FALSE.
/
&dynamics_nml
 iequations                  = -1                               ! -1: hydrost. ocean model
/
&run_nml
 modelTimeStep               = "${oceTimeStep}"
 output                      = 'nml'                            ! namelist controlled output scheme
 activate_sync_timers        = .TRUE.
 profiling_output            = 1                                ! aggregated: 1; detailed: 2; in files: 3
 msg_timestamp               = .FALSE.
 timers_level                = 10
 debug_check_level           = 1
 restart_filename            = "${EXPNAME}_restart_oce_<rsttime>.mfr"
/
EOF
#
if [[ "$output_oce_2d_1h" == "yes" ]]; then
   #
   cat >> ${oce_namelist} << EOF
&output_nml
  filetype                   = 5
  output_filename            = "${EXPNAME}_oce_2dopt_${oce_2d_high_output_interval}"
  filename_format            = "<output_filename>_<datetime2>"
  output_start               = "${start_date}"                  ! start in ISO-format
  output_end                 = "${end_date}"                    ! end in ISO-format
  output_interval            = "${oce_2d_high_output_interval}"
  file_interval              = "${oce_file_interval}"
  mode                       = 1                                ! 1: forecast mode (relative t-axis)
                                                                ! 2: climate mode (absolute t-axis)
  include_last               = .FALSE.
  output_grid                = .FALSE.
  filename_format            = "<output_filename>_<datetime2>"
  operation                  = "mean"
  m_levels                   = "1"
  ml_varlist                 = 'zos', 'mlotst',
                               'Qtop','Qbot',
                               'atmos_fluxes_stress_x',
                               'atmos_fluxes_stress_y',
                               'atmos_fluxes_stress_xw',
                               'atmos_fluxes_stress_yw',
                               'atmos_fluxes_HeatFlux_ShortWave',
                               'atmos_fluxes_HeatFlux_LongWave',
                               'atmos_fluxes_HeatFlux_Sensible',
                               'atmos_fluxes_HeatFlux_Latent',
                               'atmos_fluxes_HeatFlux_Total',
                               'atmos_fluxes_FrshFlux_Precipitation',
                               'atmos_fluxes_FrshFlux_SnowFall',
                               'atmos_fluxes_FrshFlux_Evaporation',
                               'atmos_fluxes_FrshFlux_Runoff',
                               'sea_level_pressure',
                               'Wind_Speed_10m',
                               'to', 'so', 'u', 'v'
/
EOF
fi
#
if [[ "$output_oce_2d_3h" == "yes" ]]; then
   #
   cat >> ${oce_namelist} << EOF
&output_nml
  filetype                   = 5
  output_filename            = "${EXPNAME}_oce_2dhf_${oce_2d_output_interval}"
  filename_format            = "<output_filename>_<datetime2>"
  output_start               = "${start_date}"                  ! start in ISO-format
  output_end                 = "${end_date}"                    ! end in ISO-format
  output_interval            = "${oce_2d_output_interval}"
  file_interval              = "${oce_file_interval}"
  mode                       = 1                                ! 1: forecast mode (relative t-axis)
                                                                ! 2: climate mode (absolute t-axis)
  include_last               = .FALSE.
  output_grid                = .FALSE.
  filename_format            = "<output_filename>_<datetime2>"
  operation                  = "mean"
  ml_varlist                 = 'zos', 'mlotst',
                               'Qtop','Qbot',
                               'atmos_fluxes_stress_x',
                               'atmos_fluxes_stress_y',
                               'atmos_fluxes_stress_xw',
                               'atmos_fluxes_stress_yw',
                               'atmos_fluxes_HeatFlux_ShortWave',
                               'atmos_fluxes_HeatFlux_LongWave',
                               'atmos_fluxes_HeatFlux_Sensible',
                               'atmos_fluxes_HeatFlux_Latent',
                               'atmos_fluxes_HeatFlux_Total',
                               'atmos_fluxes_FrshFlux_Precipitation',
                               'atmos_fluxes_FrshFlux_SnowFall',
                               'atmos_fluxes_FrshFlux_Evaporation',
                               'atmos_fluxes_FrshFlux_Runoff',
                               'sea_level_pressure',
                               'Wind_Speed_10m','hi', 'hs', 'conc', 'ice_u', 'ice_v'
/
EOF
fi
#
if [[ "$output_oce_3d_top_level" == "yes" ]]; then
   #
   cat >> ${oce_namelist} << EOF
&output_nml
  filetype                   = 5
  output_filename            = "${EXPNAME}_oce_3dtoplevel_${oce_3d_top_level_output_interval}"
  filename_format            = "<output_filename>_<datetime2>"
  output_start               = "${start_date}"                  ! start in ISO-format
  output_end                 = "${end_date}"                    ! end in ISO-format
  output_interval            = "${oce_3d_top_level_output_interval}"
  file_interval              = "${oce_file_interval}"
  mode                       = 1                                ! 1: forecast mode (relative t-axis)
                                                                ! 2: climate mode (absolute t-axis)
  include_last               = .FALSE.
  output_grid                = .FALSE.
  filename_format            = "<output_filename>_<datetime2>"
  operation                  = "mean"
  m_levels                   = "1"
  ml_varlist                 = 'to', 'so', 'u', 'v', 'vort'
/
EOF
fi
#
if [[ "$output_oce_3d_24h" == "yes" ]]; then
   #
   cat >> ${oce_namelist} << EOF
&output_nml
  filetype                   = 5
  output_filename            = "${EXPNAME}_oce_3d_${oce_3d_output_interval}"
  filename_format            = "<output_filename>_<datetime2>"
  output_start               = "${start_date}"                  ! start in ISO-format
  output_end                 = "${end_date}"                    ! end in ISO-format
  output_interval            = "${oce_3d_output_interval}"
  file_interval              = "${oce_file_interval}"
  mode                       = 1                                ! 1: forecast mode (relative t-axis)
                                                                ! 2: climate mode (absolute t-axis)
  include_last               = .FALSE.
  output_grid                = .FALSE.
  filename_format            = "<output_filename>_<datetime2>"
  operation                  = "mean"
  ml_varlist                 = 'to', 'so', 'u', 'v', 'w'
/
&output_nml
  filetype                   = 5
  output_filename            = "${EXPNAME}_oce_opt_${oce_3d_output_interval}"
  filename_format            = "<output_filename>_<datetime2>"
  output_start               = "${start_date}"                  ! start in ISO-format
  output_end                 = "${end_date}"                    ! end in ISO-format
  output_interval            = "${oce_3d_output_interval}"
  file_interval              = "${oce_file_interval}"
  mode                       = 1                                ! 1: forecast mode (relative t-axis)
                                                                ! 2: climate mode (absolute t-axis)
  include_last               = .FALSE.
  output_grid                = .FALSE.
  filename_format            = "<output_filename>_<datetime2>"
  operation                  = "mean"
  ml_varlist                 = 'vort','heat_content_liquid_water','A_veloc_v','A_tracer_v_to','rsdoabsorb'
/
&output_nml
  filetype                   = 5
  output_filename            = "${EXPNAME}_oce_2d_${oce_3d_output_interval}"
  filename_format            = "<output_filename>_<datetime2>"
  output_start               = "${start_date}"                  ! start in ISO-format
  output_end                 = "${end_date}"                    ! end in ISO-format
  output_interval            = "${oce_3d_output_interval}"
  file_interval              = "${oce_file_interval}"
  mode                       = 1                                ! 1: forecast mode (relative t-axis)
                                                                ! 2: climate mode (absolute t-axis)
  include_last               = .FALSE.
  output_grid                = .FALSE.
  filename_format            = "<output_filename>_<datetime2>"
  operation                  = "mean"
  ml_varlist                 = 'heat_content_seaice', 'heat_content_snow', 'heat_content_total',
                               'verticallyTotal_mass_flux_e', 'hi', 'hs', 'conc',
                               'ice_u', 'ice_v', 'zos', 'mlotst',
                               'Qtop','Qbot',
                               'atmos_fluxes_stress_x',
                               'atmos_fluxes_stress_y',
                               'atmos_fluxes_stress_xw',
                               'atmos_fluxes_stress_yw',
                               'atmos_fluxes_HeatFlux_ShortWave',
                               'atmos_fluxes_HeatFlux_LongWave',
                               'atmos_fluxes_HeatFlux_Sensible',
                               'atmos_fluxes_HeatFlux_Latent',
                               'atmos_fluxes_HeatFlux_Total',
                               'atmos_fluxes_FrshFlux_Precipitation',
                               'atmos_fluxes_FrshFlux_SnowFall',
                               'atmos_fluxes_FrshFlux_Evaporation',
                               'atmos_fluxes_FrshFlux_Runoff',
                               'sea_level_pressure',
                               'Wind_Speed_10m'
/
&output_nml
  filetype                   = 5
  output_filename            = "${EXPNAME}_oce_3dlev_${oce_3d_output_interval}"
  filename_format            = "<output_filename>_<datetime2>"
  output_start               = "${start_date}"                  ! start in ISO-format
  output_end                 = "${end_date}"                    ! end in ISO-format
  output_interval            = "${oce_3d_output_interval}"
  file_interval              = "${oce_file_interval}"
  mode                       = 1                                ! 1: forecast mode (relative t-axis)
                                                                ! 2: climate mode (absolute t-axis)
  include_last               = .FALSE.
  output_grid                = .FALSE.
  filename_format            = "<output_filename>_<datetime2>"
  operation                  = "mean"
  m_levels                   = "1,5,15,30"
  ml_varlist                 = 'to', 'so', 'u', 'v', 'vort'
/
EOF
fi
if [[ "$output_oce_fx" == "yes" ]]; then
   #
   cat >> ${oce_namelist} << EOF
&output_nml
  filetype                   = 5
  output_filename            = "${EXPNAME}_oce_fx"
  filename_format            = "<output_filename>_<datetime2>"
  output_start               = "${fx_date}"                  ! start in ISO-format
  output_end                 = "${fx_date}"                    ! end in ISO-format
  output_interval            = "${oce_3d_output_interval}"
  file_interval              = "${oce_file_interval}"
  mode                       = 1                                ! 1: forecast mode (relative t-axis)
                                                                ! 2: climate mode (absolute t-axis)
  include_last               = .FALSE.
  output_grid                = .TRUE.
  filename_format            = "<output_filename>_<datetime2>"
  ml_varlist                 = 'lsm_ctr_c','lsm_c','lsm_e','surface_cell_sea_land_mask','surface_edge_sea_land_mask',
                               'surface_vertex_sea_land_mask','vertex_bottomLevel','basin_c','regio_c','bottom_thick_c',
                               'bottom_thick_e','column_thick_c','column_thick_e','wet_c','wet_e','wet_halo_zero_c',
                               'wet_halo_zero_e','prism_thick_c','prism_volume','prism_thick_e',
                               'prism_thick_flat_sfc_c','prism_thick_flat_sfc_e','prism_center_dist_c',
                               'constantPrismCenters_Zdistance',
                               'inv_prism_center_dist_e','depth_CellMiddle'
/
EOF
fi
if [[ "$output_oce_3d_upper_levels" == "yes" ]]; then
   #
   cat >> ${oce_namelist} << EOF
&output_nml
  filetype                   = 5
  output_filename            = "${EXPNAME}_oce_3du200m_${oce_3d_upper_levels_output_interval}"
  filename_format            = "<output_filename>_<datetime2>"
  output_start               = "${start_date}"                  ! start in ISO-format
  output_end                 = "${end_date}"                    ! end in ISO-format
  output_interval            = "${oce_3d_upper_levels_output_interval}"
  file_interval              = "${oce_file_interval}"
  mode                       = 1                                ! 1: forecast mode (relative t-axis)
                                                                ! 2: climate mode (absolute t-axis)
  include_last               = .FALSE.
  output_grid                = .FALSE.
  filename_format            = "<output_filename>_<datetime2>"
  operation                  = "mean"
  m_levels                   = "1...12"
  ml_varlist                 = 'to', 'so', 'u', 'v', 'w',
                               'A_tracer_v_to', 'A_veloc_v'
/
EOF
fi
#
if [[ "$output_oce_monitor" == "yes" ]]; then
   #
   cat >> ${oce_namelist} << EOF
&output_nml
  filetype                   = 5
  output_filename            = "${EXPNAME}_oce_mon_${oce_monitor_output_interval}"
  filename_format            = "<output_filename>_<datetime2>"
  output_start               = "${start_date}"                  ! start in ISO-format
  output_end                 = "${end_date}"                    ! end in ISO-format
  output_interval            = "${oce_monitor_output_interval}"
  file_interval              = "${oce_file_interval}"
  mode                       = 1                                ! 1: forecast mode (relative t-axis)
                                                                ! 2: climate mode (absolute t-axis)
  include_last               = .FALSE.
  output_grid                = .TRUE.
  filename_format            = "<output_filename>_<datetime2>"
  operation                  = "mean"
  ml_varlist                 =  group:ocean_monitor
/
&output_nml
  filetype                   = 5
  output_filename            = "${EXPNAME}_oce_moc_${oce_3d_output_interval}"
  filename_format            = "<output_filename>_<datetime2>"
  output_start               = "${start_date}"                  ! start in ISO-format
  output_end                 = "${end_date}"                    ! end in ISO-format
  output_interval            = "${oce_3d_output_interval}"
  file_interval              = "${oce_file_interval}"
  mode                       = 1                                ! 1: forecast mode (relative t-axis)
                                                                ! 2: climate mode (absolute t-axis)
  include_last               = .FALSE.
  output_grid                = .TRUE.
  filename_format            = "<output_filename>_<datetime2>"
  operation                  = "mean"
  ml_varlist                 =  group:ocean_moc
/
EOF
fi
#
cat >> ${oce_namelist} << EOF
&dbg_index_nml
  idbg_mxmn                  = 0                                ! initialize MIN/MAX  debug output
  idbg_val                   = 0                                ! initialize one cell debug output
  idbg_slev                  = 1                                ! initialize start level for debug output
  idbg_elev                  = 5                                ! initialize end level for debug output
  dbg_lat_in                 = 30.0                             ! latitude location of one cell debug output
  dbg_lon_in                 = -30.0                            ! longitude location of one cell debug output
  str_mod_tst                = 'all'                            ! define modules to print out in debug mode
/
&ocean_dynamics_nml
! 40 unevenly spaced levels used by MPIOM/GR30
 n_zlev         =   40
 dzlev_m(1:40)  =   12.0,   10.0,   10.0,   10.0,   10.0,   10.0,   13.0,   15.0,   20.0,   25.0,
                    30.0,   35.0,   40.0,   45.0,   50.0,   55.0,   60.0,   70.0,   80.0,   90.0,
                   100.0,  110.0,  120.0,  130.0,  140.0,  150.0,  170.0,  180.0,  190.0,  200.0,
                   220.0,  250.0,  270.0,  300.0,  350.0,  400.0,  450.0,  500.0,  500.0,  600.0
  l_edge_based                    = .FALSE.          ! edge- or cell-based mimetic discretization

  select_solver                   = 4       ! 1=gmres_oce_old; 2=ocean_restart_gmres, 3=mixed precisison restart
                                            ! 4=CG (default) 5=CGJ 6=BiCG 7=GMRES restart (legacy) 8=MINRES
  use_absolute_solver_tolerance   = .true.
  solver_tolerance                = 1.0E-10 ! this may further be reduced

  select_lhs                      = 2       ! 1=operator based (default) 2=matrix based
  l_lhs_direct                    = .true.  ! .true.= use lhs implementation directly  .false.= matrix scanner (default)
  solver_FirstGuess               = 2       ! 0=start from zeros 1=last timestep smoothed 2=last timestep (default)

  fast_performance_level          = 200       ! performance level 12: for cell-based; 5: default
  use_continuity_correction       = .TRUE.    ! height adjustment according to vertical velocity in dynamics
  cfl_check                       = .FALSE.
  cfl_write                       = .FALSE.

  i_bc_veloc_top                  =   1
  i_bc_veloc_bot                  =   1       ! 0: (def) bottom friction off, 1: on
/
&ocean_tracer_transport_nml
  flux_calculation_horz                      = 5                ! 1=upwind, 2=central, 3=Lax-Friedrichs,
                                                                ! 4=Miura, 5=FCT with Zalesak limiter (default)
  flux_calculation_vert                      = 7                ! 6=adpo; 7=upwind biased ppm (default); 8=FCT with zalesak limiter
  fct_low_order_flux                         = 1                ! horizontal low  order method: 1=upwind (def), no other implemented
  fct_high_order_flux                        = 5                ! horizontal high order method: 1=upwind, 2=central, 3=lax_friedrichs, 4=miura_order1
  fct_limiter_horz                           = 100              ! zalesak
  threshold_min_T                            = -2.0             ! to avoid abort
/
&ocean_horizontal_diffusion_nml
  laplacian_form                             = 1                ! 1=curlcurl-graddiv
  VelocityDiffusion_order                    = 1                ! 21=biharmonic+laplacian (for the laplacian leith)
                                                                !
  BiharmonicViscosity_scaling                = 0
  BiharmonicViscosity_reference              = 0.0              ! [m2/s] constant horizontal viscosity coefficient for velocity
  BiharmonicViscosity_background             = 0.0              ! [m2/s] constant horizontal viscosity coefficient for velocity

  HarmonicViscosity_scaling                  = 1
  HarmonicViscosity_reference                = 3.0E+4           ! [m2/s] constant horizontal viscosity coefficient for velocity
  HarmonicViscosity_background               = 0.0

  TracerHorizontalDiffusion_scaling          = 1
  Temperature_HorizontalDiffusion_Background = 0.0
  Temperature_HorizontalDiffusion_Reference  = 0
  Salinity_HorizontalDiffusion_Background    = 0.0
  Salinity_HorizontalDiffusion_Reference     = 0
/
&ocean_vertical_diffusion_nml
  vert_mix_type                              = 2      ! 1: PP; 2: TKE; 3: KPP; 4 TKE+IDEMIX
  only_tke                                   = .true. ! .true. for TKE; .false. for TKE+IDEMIX
  ! cvmix/tke parameters
  c_k                                        = 0.3
  c_eps                                      = 0.7
  alpha_tke                                  = 30.0
  mxl_min                                    = 1.d-8
  kappaM_min                                 = 0.0
  kappaM_max                                 = 100.0
  cd                                         = 3.75
  tke_min                                    = 1.d-6
  tke_mxl_choice                             = 2
  tke_surf_min                               = 1.d-4
  l_lc                                       = .false.          ! Use Langmuir parameterisation (Axell, 2002)
  clc                                        = 0.15             ! Factor in the vertical velocity profile of the Langmuir circulation (default clc=0.1 in Axell (2002))                                                  
  use_ubound_dirichlet = .false.
  use_lbound_dirichlet = .false.

/
&ocean_GentMcWilliamsRedi_nml
  GMRedi_configuration                       = 1                ! 0=cartesian diffusion; 1=GM-Redi: bolus advection + isopycnal diffusion
  tapering_scheme                            = 1
  GMRedi_usesRelativeMaxSlopes               = .FALSE.
  S_max                                      = 1.0e-3           ! 1.0
  S_d                                        = 1.0e-4           ! 5e-3 to 5e-4
                                                                !
  k_tracer_GM_kappa_parameter                = 1000.0           !
  k_tracer_isoneutral_parameter              = 1000.0           ! value for cell-based cartesian diffusion - mpiom: 1000/400km = 400/160km
  k_tracer_dianeutral_parameter              = 0.0              ! 1.0E-5  !
                                                                !
  switch_off_diagonal_vert_expl              = .TRUE.
  gmredi_combined_diagnostic                 = .FALSE.
! switch_on_redi_balance_diagnostic          = .FALSE.          ! not yet available in icon-aes-dyamond++
  revert_vertical_recon_and_transposed       = .TRUE.
  slope_calc_via_temperture_salinity         = .TRUE.
  include_slope_squared_implicit             = .TRUE.           ! think of l_with_vert_tracer_diffusion
  switch_on_tapering_horizontal_diffusion    = .TRUE.
/
&ocean_physics_nml
  i_sea_ice                                  = 1                ! 0 = no sea ice; 1 = sea ice model on; default=1
/
&sea_ice_nml
  albedow_sim                                = 0.10
  albi                                       = 0.70
  albim                                      = 0.65
  albs                                       = 0.80
  albsm                                      = 0.65
  i_ice_therm                                = 1                ! 1=zero-layer (default), 2=Winton, 0/2: not allowed
  i_ice_dyn                                  = 1                ! 1/0=switch on/off AWI ice dynamics
! leadclose_1                                = 0.25             ! default: 0.5 - value of MPIOM: 0.25
! leadclose_2n                               = 0.666            ! default: 0.0 - value of MPIOM: 2/3
/
&ocean_forcing_nml
  iforc_oce                                  = 14               ! ocean forcing: 14 from coupling via YAC
  type_surfRelax_Temp                        = -1               ! -1: use net surface heat flux from atmosphere
                                                                !  0: no relaxation used
                                                                !  1: relaxation switched on for reading (init_oce_relax=1)
                                                                !     or some testcases only
  forcing_enable_freshwater                  = .TRUE.           ! enable/disable freshwater flux
  forcing_windstress_u_type                  = 2                ! 0: zero wind stress, 1: read from file, 2: none
  forcing_windstress_v_type                  = 2                ! 0: zero wind stress, 1: read from file, 2: none
                                                                ! salt-change due to internal fluxes only
  limit_seaice                               = .TRUE.           ! default: TRUE
  seaice_limit                               = 0.8              ! hard limit set to 80% of upper layer for sea ice
  limit_elevation                            = .TRUE.           ! to be checked!
/
EOF
#
if [[ "$initialiseOcean" == "fromRestart" ]]; then
  #
  cat >> ${oce_namelist} << EOF
&ocean_initialConditions_nml
  initial_salinity_type                      = 0                ! 0: none, 1: read S from initial_state.nc
  initial_temperature_type                   = 0                ! 0: none, 1: read T from initial_state.nc
  initialize_fromRestart                     = .TRUE.
/
EOF
#
else
#
  if [[ "$initialiseOcean" == "fromClimatology" ]]; then
    cat >> ${oce_namelist} << EOF
&ocean_initialConditions_nml
  initial_salinity_type                      = 1                ! 0: none, 1: read S from initial_state.nc
  initial_temperature_type                   = 1                ! 0: none, 1: read T from initial_state.nc
  initialize_fromRestart                     = .FALSE.
/
EOF
  else
    cat >> ${oce_namelist} << EOF
&ocean_initialConditions_nml
  initial_salinity_type                      = 0                ! 0: none, 1: read S from initial_state.nc
  initial_temperature_type                   = 0                ! 0: none, 1: read T from initial_state.nc
  initialize_fromRestart                     = .FALSE.
/
EOF
  fi
fi
#
cat >> ${oce_namelist} << EOF
&ocean_diagnostics_nml
  diagnostics_level                          = 1
  diagnose_for_horizontalVelocity            = .FALSE.
  diagnose_for_tendencies                    = .FALSE.
  diagnose_for_heat_content                  = .TRUE.
/
&io_nml
  restart_file_type                          = 5
  write_last_restart                         = .TRUE.
  restart_write_mode                         = "joint procs multifile"
/
EOF

add_required_file ${thisdir}/${oce_namelist} ./

#-----------------------------------------------------------------------------
#
# For a restart run the ocean only requires the grid
# and the restart file. No other files are required.
#
if [[ "$initialiseOcean" == "fromRestart" ]]; then
  add_link_file ${ocean_data_InputFolder}/restart/rar0407_restart_oce_19800101T000000Z.mfr multifile_restart_ocean.mfr
else
  add_link_file ${ocean_data_InputFolder}/initial_conditions/ts_phc3.0_annual_icon_grid_0036_R02B04_O_L40.nc initial_state.nc
fi
#
# Ocean grid
#
add_link_file ${ocean_grid_folder}/${ocean_grid} ./
#
#-----------------------------------------------------------------------------

#!/bin/ksh
#=============================================================================
#
# This section of the run script prepares and starts the model integration.
#
# MODEL must be defined as environment variables or
# they must be substituted with appropriate values.
#
# Marco Giorgetta, MPI-M, 2010-04-21
#
#-----------------------------------------------------------------------------
final_status_file=${basedir}/run/${job_name}.final_status
rm -f ${final_status_file}
#-----------------------------------------------------------------------------
#
# directories definition
#
RUNSCRIPTDIR=${thisdir}

make_and_change_to_experiment_dir

#-----------------------------------------------------------------------------
final_status_file=${RUNSCRIPTDIR}/${job_name}.final_status
rm -f ${final_status_file}

#-----------------------------------------------------------------------------
# set up the model lists if they do not exist
# this works for single model runs
# for coupled runs the lists should be declared explicilty
if [ x$namelist_list = x ]; then
  minrank_list[0]=0
  maxrank_list[0]=65535
  incrank_list[0]=1
  if [ x$atmo_namelist != x ]; then
    # this is the atmo model
    namelist_list[0]="$atmo_namelist"
    modelname_list[0]="atmo"
    modeltype_list[0]=1
    run_atmo="true"
  elif [ x$ocean_namelist != x ]; then
    # this is the ocean model
    namelist_list[0]="$ocean_namelist"
    modelname_list[0]="oce"
    modeltype_list[0]=2
  elif [ x$jsbach_namelist != x ]; then
    # this is the jsbach standalone model
    namelist_list[0]="$jsbach_namelist"
    modelname_list[0]="jsbach"
    modeltype_list[0]=5
    run_jsbach_standalone="true"
  else
    check_error 1 "No namelist is defined"
  fi
fi

#-----------------------------------------------------------------------------
# check if we can restart

restart=.false.

if [ -f  isRestartRun.sem ]; then
  restart=.true.
fi

#-----------------------------------------------------------------------------
# print_required_files
copy_required_files
link_required_files

#-----------------------------------------------------------------------------
#
# create ICON master namelist
# ------------------------
# For a complete list see Namelist_overview and Namelist_overview.pdf

#-----------------------------------------------------------------------------
# create master_namelist
if [ -z "$dont_create_icon_master_namelist" ]; then
  master_namelist=icon_master.namelist

  calendar=${calendar:="proleptic gregorian"}
  calendar_type=${calendar_type:=1}
  {
    echo "&master_nml"
    echo " lrestart               =  $restart"
    echo " read_restart_namelists =  .false."
    echo "/"

    if [ -z "$nsteps" ]; then
      echo "&master_time_control_nml"
      echo " calendar             = '$calendar'"
      echo " experimentStartDate  = '$start_date'"
      echo " restartTimeIntval    = '$restart_interval'"
      echo " checkpointTimeIntval = '$checkpoint_interval'"
      if [ -n "$end_date" ]; then
        echo " experimentStopDate = '$end_date'"
      fi
      echo "/"

      echo "&time_nml"
      echo " is_relative_time     = .true."
      echo "/"

    else # $nsteps is set -> use time_nml:ini_datetime_string
      echo "&time_nml"
      echo " calendar             =  $calendar_type"
      echo " ini_datetime_string  = '$start_date'"
      echo " dt_restart           =  $dt_restart"
      echo "/"
    fi
  } > $master_namelist

fi
#-----------------------------------------------------------------------------


#-----------------------------------------------------------------------------
# add model component to master_namelist
add_component_to_master_namelist()
{
  model_namelist_filename=$1
  if [ x${dont_create_icon_master_namelist+set} != xset ]; then
    model_name=$2
    model_type=$3
    model_min_rank=$4
    model_max_rank=$5
    model_inc_rank=$6
    cat >> $master_namelist << EOF
&master_model_nml
  model_name="$model_name"
  model_namelist_filename="$model_namelist_filename"
  model_type=$model_type
  model_min_rank=$model_min_rank
  model_max_rank=$model_max_rank
  model_inc_rank=$model_inc_rank
/
EOF
  fi

  #-----------
  #get namelist
  if [ -f ${RUNSCRIPTDIR}/$model_namelist_filename ] ; then
    mv -f ${RUNSCRIPTDIR}/$model_namelist_filename ${EXPDIR}
    check_error $? "mv -f ${RUNSCRIPTDIR}/$model_namelist_filename ${EXPDIR}"
  else
    check_error 1 "${RUNSCRIPTDIR}/$model_namelist_filename does not exist"
  fi
}
#-----------------------------------------------------------------------------

no_of_models=${#namelist_list[*]}
echo "no_of_models=$no_of_models"

j=0
while (( j < no_of_models ))
do
  add_component_to_master_namelist "${namelist_list[$j]}" "${modelname_list[$j]}" ${modeltype_list[$j]} ${minrank_list[$j]} ${maxrank_list[$j]} ${incrank_list[$j]}
  j=`expr ${j} + 1`
done

#-----------------------------------------------------------------------------
# Add JSBACH part to master_namelist
# For several domains, $jsbach_namelist is only the basename for each domain's jsbach namelist;
#   the actual namelist files are appended by suffixes '_d1', '_d2', etc.

cat >> $master_namelist << EOF
&jsb_control_nml
 is_standalone      = .${run_jsbach_standalone:=false}.
 restart_jsbach     = ${restart}
 debug_level        = 0
 timer_level        = 0
/
EOF
#
no_of_domains=1

echo "no_of_domains=$no_of_domains"
domain=""
domain_suffix=""
j=1

cat >> $master_namelist << EOF
&jsb_model_nml
 model_id = $j
 model_name = "JSBACH${domain}"
 model_shortname = "jsb${domain_suffix}"
 model_description = 'JSBACH land surface model'
 model_namelist_filename = "${jsbach_namelist}${domain_suffix}"
/
EOF
if [[ -f ${RUNSCRIPTDIR}/${jsbach_namelist}${domain_suffix} ]] ; then
  mv ${RUNSCRIPTDIR}/${jsbach_namelist}${domain_suffix} ${EXPDIR}
  check_error $? "mv ${RUNSCRIPTDIR}/${jsbach_namelist}${domain_suffix}"
else
  check_error 1 "${RUNSCRIPTDIR}/${jsbach_namelist}${domain_suffix} does not exist"
fi
#
#  get model
#
ls -l ${MODEL}
check_error $? "${MODEL} does not exist?"
#
ldd ${MODEL}
#
#-----------------------------------------------------------------------------
#
# start experiment
#

rm -f finish.status
#
date
set -x

srun --export=ALL --propagate=CORE --label \
    -n $tot_tasks \
    --cpu-bind=verbose,core \
       env OMP_NUM_THREADS=4 \
         OMP_STACKSIZE=256M \
    ICON_THREADS=4 \
    ${MODEL}

